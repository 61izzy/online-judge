extends base

- load i18n
- load staticfiles

block js_media
    script(type='text/javascript').
        window.valid_files = #{valid_files_json};
    if has_select2
        script(type='text/javascript', src='{{ SELECT2_JS_URL }}')
        script(type='text/javascript').
            $(function () {
                function autofill_if_exists($select, file) {
                    if (!$select.val() && ~window.valid_files.indexOf(file))
                        $select.val(file).trigger('change');
                }

                $('#case-table').on('add-row', function (e, $tr) {
                    $tr.find('input').filter('[id$=file]').each(function () {
                        var $select, val = $(this).replaceWith($select = $('<select/>').attr({
                            id: $(this).attr('id'),
                            name: $(this).attr('name'),
                            style: 'width: 100%'
                        })).val();
                        $select.select2({
                            data: window.valid_files,
                            allowClear: true,
                            placeholder: ''
                        }).val(val).trigger('change').on('change', function () {
                            var val = $select.val();
                            if (val) {
                                if ($select.attr('id').endsWith('input_file'))
                                    autofill_if_exists($tr.find('select[id$=output_file]'), val.replace(/in(?!.*?in)/, 'out'));
                                else
                                    autofill_if_exists($tr.find('select[id$=input_file]'), val.replace(/out(?!.*?out)/, 'in'));
                            }
                        });
                    });
                });
            });
    script(type='text/javascript', src='{% static "libs/jquery-sortable.js" %}')
    script(type='text/javascript').
        $(function () {
            var order = 0;
            var $table = $('#case-table');

            function swap_row($a, $b) {
                var $a_order = $a.find('input[id$=order]'), $b_order = $b.find('input[id$=order]');
                var order = $a_order.val();
                $a_order.val($b_order.val());
                $b_order.val(order);
                $b.after($a);
                $a.find('span.order').text($a_order.val());
                $b.find('span.order').text($b_order.val());
            }

            $table.on('add-row', function (e, $tr) {
                var $order = $tr.find('input').filter('[id$=order]').attr('type', 'hidden').val(++order)
                        .after($('<i>', {'class': 'fa case-move fa-chevron-down'}).click(function () {
                            var $tr = $(this).parents('tr'), $next = $tr.next();
                            if ($next.length) {
                                swap_row($tr, $next);
                                window.scrollBy(0, $next.height());
                            }
                        }))
                        .after($('<i>', {'class': 'fa case-move fa-chevron-up'}).click(function () {
                            var $tr = $(this).parents('tr'), $prev = $tr.prev();
                            if ($prev.length) {
                                swap_row($prev, $tr);
                                window.scrollBy(0, -$prev.height());
                            }
                        }));
                $order.after($('<span>', {'class': 'order'}).text($order.val()))
                        .after($('<i>', {'class': 'fa fa-fw fa-lg fa-ellipsis-v'}));

                var $opts = $tr.find('input').slice(2, 6);
                var $files = $tr.find('select').slice(1);
                $tr.find('select[id$=type]').change(function () {
                    var $this = $(this), val = $this.val(), disabled;
                    switch (val) {
                        case 'S':
                        case 'E':
                            disabled = val == 'S';
                            $opts.prop('disabled', val != 'S');
                            $files.prop('disabled', true);
                            break;
                        default:
                            $opts.prop('disabled', val != 'C');
                            $files.prop('disabled', val != 'C');
                            var $prevs = $tr.prevAll('tr[data-type=S], tr[data-type=E]');
                            disabled = $prevs.length && $prevs.get(0).getAttribute('data-type') == 'S';
                            $tr.find('input[id$=points], input[id$=pretest]').prop('disabled', val != 'C' || disabled);
                    }
                    $tr.attr('data-type', val).nextUntil('tr[data-type=S], tr[data-type=E], tr[data-type=]')
                            .find('input[id$=points], input[id$=pretest]').prop('disabled', disabled);
                }).change();
            }).find('tbody:first').find('tr').each(function () {
                $table.trigger('add-row', [$(this)]);
            });

            $('form').submit(function () {
                $table.find('tbody:first').find('tr').each(function () {
                    var filled = false;
                    $(this).find('input, select').each(function () {
                        var $this = $(this);
                        if ($this.attr('type') === 'checkbox')
                            filled |= $this.is(':checked');
                        else if (!$this.attr('name').endsWith('order'))
                            filled |= !!$this.val();
                    });
                    if (!filled)
                        $(this).find('input[id$=order]').val('');
                });
            });

            var $total = $('#id_cases-TOTAL_FORMS');

            $('a#add-case-row').click(function () {
                var $tr;
                $table.find('tbody:first').append($tr = $($table.find('.extra-row-body').html()
                        .replace(/__prefix__/g, $total.val())));
                $total.val(parseInt($total.val()) + 1);
                $table.trigger('add-row', [$tr]);
                window.scrollBy(0, $tr.height());
                return false;
            });

            var oldIndex;
            $table.sortable({
                containerSelector: 'table',
                itemPath: '> tbody:first',
                itemSelector: 'tr',
                handle: 'i.fa-ellipsis-v',
                placeholder: '<tr class="placeholder"/>',
                onDragStart: function ($item, container, _super) {
                    oldIndex = $item.index();
                    _super($item, container);
                },
                onDrop: function ($item, container, _super) {
                    var newIndex = $item.index();
                    console.log(oldIndex, newIndex);
                    if (newIndex > oldIndex) {
                        var order = parseInt($item.parent().children().slice(oldIndex, newIndex).each(function () {
                            var $order = $(this).find('input[id$=order]');
                            $order.val(parseInt($order.val()) - 1).siblings('span.order').text($order.val());
                        }).last().after($item).find('input[id$=order]').val());
                        $item.find('input[id$=order]').val(order + 1).siblings('span.order').text(order + 1);
                    } else if (newIndex < oldIndex) {
                        console.log($item.parent().children().slice(newIndex + 1, oldIndex + 1));
                        var order = parseInt($item.parent().children().slice(newIndex + 1, oldIndex + 1).each(function () {
                            var $order = $(this).find('input[id$=order]');
                            $order.val(parseInt($order.val()) + 1).siblings('span.order').text($order.val());
                        }).first().before($item).find('input[id$=order]').val());
                        $item.find('input[id$=order]').val(order - 1).siblings('span.order').text(order - 1);
                    }
                }
            });
        });

block media
    if has_select2
        link(href='{{ SELECT2_CSS_URL }}', type='text/css', media='screen', rel='stylesheet')
    style.
        .case-move {
            cursor: pointer;
        }

        #case-table > tbody > tr:first-child .case-move.fa-chevron-up,
        #case-table > tbody > tr:last-child .case-move.fa-chevron-down {
            color: #ccc;
            cursor: not-allowed;
        }

        #case-table .select2 {
            text-align: initial;
        }

        .bad-file input, .bad-file .select2-selection {
            border-color: red;
        }

        span.order {
            padding-right: 0.5em;
        }

block header
    if data_form.instance.has_yml
        .title-line-action [#[a(href='{% url "problem_data_init" problem.code %}') {% trans "View YAML" %}]]

block body
    if data_form.instance.feedback
        ul.errorlist: li= data_form.instance.feedback

    form(action='', method='POST', enctype='multipart/form-data')
        - csrf_token
        #{cases_formset.management_form}
        table.table #{data_form.as_table}
        table.table#case-table
            thead: tr
                th {% trans "Order" %}
                th {% trans "Type" %}
                th {% trans "Input file" %}
                th {% trans "Output file" %}
                th {% trans "Points" %}
                th {% trans "Pretest?" %}
                th {% trans "Output prefix" %}
                th {% trans "Output limit" %}
                th {% trans "Generator args" %}
                if cases_formset.can_delete
                    th {% trans "Delete?" %}
            tbody: each form in all_case_forms
                if form.non_field_errors
                    tr: td(colspan=(9 + cases_formset.can_delete)) #{form.non_field_errors}
                if form.prefix and '__prefix__' in form.prefix
                    </tbody><tbody class="extra-row-body" style="display: none">
                tr(data-type=form['type'].value())
                    td #{form.id}#{form.order.errors}#{form.order}
                    td #{form.type.errors}#{form.type}
                    td(class=(None if form.empty_permitted or form['type'].value() != 'C' or form['input_file'].value() in valid_files else 'bad-file'))
                        | #{form.input_file.errors}#{form.input_file}
                    td(class=(None if form.empty_permitted or form['type'].value() != 'C' or form['output_file'].value() in valid_files else 'bad-file'))
                        | #{form.output_file.errors}#{form.output_file}
                    td #{form.points.errors}#{form.points}
                    td #{form.is_pretest.errors}#{form.is_pretest}
                    td #{form.output_prefix.errors}#{form.output_prefix}
                    td #{form.output_limit.errors}#{form.output_limit}
                    td #{form.generator_args.errors}#{form.generator_args}
                    if cases_formset.can_delete
                        td #{form.DELETE}
        input(class='button', type='submit', value='{% trans "Submit!" %}')
        a#add-case-row(href='#') #[i.fa.fa-plus] {% trans "Add new case" %}
